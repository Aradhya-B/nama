import unittest
import os.path as path
import pandas as pd
from nama.compare import component_compare, confusion_matrix_by_component, _naive_confusion_matrix_by_component
from nama.evaluation import _create_test_matches_df_from_test_data_path, _create_test_and_predicted_matcher
from nama.hashes import corpHash

TEST_DATA_PATH = path.abspath(__file__ + '/../trainingData/test.csv')

class TestCompareMethods(unittest.TestCase):
    """Tests correctness of efficient compare score algorithms"""

    def setUp(self):
        gold_df = _create_test_matches_df_from_test_data_path(nrows=100)
        gold_matcher, predicted_matcher = _create_test_and_predicted_matcher(gold_df)
        self.gold_matcher = gold_matcher
        self.predicted_matcher = predicted_matcher


    
    def test_component_compare(self):
        """Uses CorpHash to test if efficient component compare algorithm returns the same confusion matrix as naive method."""
        self.predicted_matcher.matchHash(corpHash)
        naive_cm = _naive_confusion_matrix_by_component(self.predicted_matcher, self.gold_matcher)
        efficient_cm = confusion_matrix_by_component(self.predicted_matcher, self.gold_matcher)
        print('naive confusion matrix:', naive_cm)
        print('efficient confusion matrix:', efficient_cm)
        # Assert that confusion matrix generated by efficient and naive algorithm is equal
        self.assertDictEqual(
            naive_cm,
            efficient_cm
        )

if __name__ == '__main__':
    unittest.main()
